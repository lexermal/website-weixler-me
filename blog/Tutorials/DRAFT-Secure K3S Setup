# Setup K3s with secure connection to clients via WireGuard

Hello, this tutorial will show how to easily set up a K3s cluster.


## Situation
Let's assume you have multiple servers that are all available over the internet. This could be because you are testing out multiple hosting services or simply have multiple servers you want to connect to one cluster to keep the administration effort small.

This tutorial will show how to configure a master server and one worker node. The steps shown can be repeated for an infinitive large about of worker nodes. When the number is overgrown 10, it is recommended to look out for an automated way to set up hosts.

Therefore, let's assume the hosts have the following config:

**Master Host**
* Name: master-host
* Public IP: 1.1.1.1
* WireGuard IP: 10.1.1.1 (will be configured in the tutorial)
* It is reachable from the internet.
* OS: Debian or Ubuntu like OS

**Worker Hosts**
* Name: worker-1
* WireGuard IP: 10.1.1.100 (will be configured in the tutorial)
* OS: Debian or Ubuntu like OS


## Basic WireGuard setup
This setup steps prepare the hosts with WireGuard. **These steps need to be executed on the Master and Worker hosts!**

1. Enter sudo mode ```sudo su```
2. Make sure the system is up-to-date with ```apt-get update```
3. Install WireGuard with ```apt-get install wireguard -y```
4. Generate a public and private key for WireGuard

   ```wg genkey | tee privatekey | wg pubkey > publickey```
5. Go to the directory of WireGuard ```cd /etc/wireguard```
6. Print out the private and public keys

   ```echo "private key: $(cat privatekey)" && echo "public key: $(cat publickey)"```
7. Copy the keys somewhere, you will need them in a minute.

## Set up the Master host
Let's first finish setting up WireGuard on this host by inserting the following lines into /etc/wireguard/wg0.conf

    [Interface]
    # This is the IP adress on which this host is reachable over the wireguard tunnels.
    Address = 10.1.1.1/24

    # Specifies the UDP port used for the VPN clients to connect to the wireguard host. This port must be reachable from the internet.
    ListenPort = 51871

    # Here the private key of /etc/wireguard/privatekey needs to be set
    PrivateKey = yJQjFR18...7UiL60g=

    # This line saves and updates this config file when a new VPN peer is added.
    SaveConfig = true

After executing ```wg-quick up wg0``` WireGuard is ready and running.

To start it automatically after a reboot add it to systemd by executing the following commands:

    systemctl enable wg-quick@wg0.service
    systemctl daemon-reload
    systemctl start wg-quick@wg0

### Setup K3s
Download the WireGuard install script with ```wget https://get.k3s.io -O k3s-install.sh```

Install WireGuard with ```sh k3s-install.sh --advertise-address 10.1.1.1 --flannel-iface=wg0```
This sets it up with advertising its interface to connect to the WireGuard interface with the IP we configured for the master host.

To let the worker nodes later on connect to the cluster you need to have an access token. Copy it somewhere for later usage: ```cat /var/lib/rancher/k3s/server/token```.

Now you can check if everything worked by displaying the nodes

```kubectl get nodes```
## Setup nodes
After the basic WireGuard steps are also executed on this host the following lines are inserted into /etc/wireguard/wg0.conf

    [Interface]
    # The IP address of this node in the wireguard network
    Address = 10.1.1.100/32

    # Private key of this node
    PrivateKey = F8BY....VD7Rrmw=

    [Peer]
    # Public key of the master host
    PublicKey = Brkei....fXTVI=

    # Public ip of the master host
    Endpoint = <public ip>:51871

    # All traffic for the wireguard network should be routed to our Master host
    AllowedIPs = 10.1.1.0/24

    # If the client is behind a NAT device(router, modem) this line is needed. It orders the client to send keep alives to the Master host to keep the connection in the NAT tables.
    PersistentKeepalive = 29

Now bring up the WireGuard interface with ```wg-quick up wg0```.

To start it automatically after a reboot add it to systemd by executing the following commands:

    systemctl enable wg-quick@wg0.service
    systemctl daemon-reload
    systemctl start wg-quick@wg0


The client node is ready. As last step the Master host needs to accept the connection of the clients.

This is done by adding the client to the allowed hosts by executing

```wg set wg0 peer <public key of client host> allowed-ips 10.1.1.100/32```

The set IP is the one of the client host.

To make the configuration be permanent the following needs to be executed ```wg-quick save wg0```.

Congratulations, the WireGuard connection is up and running!!

To test it simply ping the client from the master node with ```pring 10.1.1.100```.
The same can be done from the client with ```ping 10.1.1.1```.

### Setup K3s on client node
Download the WireGuard install script with ```wget https://get.k3s.io -O k3s-install.sh```

Install WireGuard with ```K3S_URL=https://10.1.1.1:6443 K3S_TOKEN=<K3s token of Master node> Â sh k3s-install.sh --node-ip 10.1.1.100 --flannel-iface=wg0```
This sets it up with advertising its interface to connect to the WireGuard interface with the IP we configured for the master host.

Keep in mind that between the K3s token and 'sh' must be 2 spaces!!!

Wait for a minute to let the client initialize

To verify that the command worked execute the following command on the client node ```journalctl -u k3s-agent```.

The output should similar to this:

    ....
    Jun 13 12:03:40 worker_node_1 k3s[1343]: E0613 12:03:40.043432    1343 kubelet.go:2040] "Skipping pod synchronization" err="[container runtime status check may not have completed yet, PLEG is not healthy: pleg has>
    Jun 13 12:03:40 worker_node_1 k3s[1343]: E0613 12:03:40.048253    1343 kubelet.go:2461] "Error getting node" err="node \"worker_node_1\" not found"
    Jun 13 12:03:40 worker_node_1 k3s[1343]: E0613 12:03:40.059449    1343 cri_stats_provider.go:455] "Failed to get the info of the filesystem with mountpoint" err="unable to find data in memory cache" mountpoint="/v>
    Jun 13 12:03:40 worker_node_1 k3s[1343]: E0613 12:03:40.059784    1343 kubelet.go:1351] "Image garbage collection failed once. Stats initialization may not have completed yet" err="invalid capacity 0 on image file>
    Jun 13 12:03:40 worker_node_1 k3s[1343]: I0613 12:03:40.060993    1343 kubelet_node_status.go:70] "Attempting to register node" node="worker_node_1"
    Jun 13 12:03:40 worker_node_1 k3s[1343]: I0613 12:03:40.086303    1343 kubelet_node_status.go:73] "Successfully registered node" node="worker_node_1"
    Jun 13 12:03:40 worker_node_1 k3s[1343]: I0613 12:03:40.128374    1343 kuberuntime_manager.go:1105] "Updating runtime config through cri with podcidr" CIDR="10.42.1.0/24"
    Jun 13 12:03:40 worker_node_1 k3s[1343]: I0613 12:03:40.129932    1343 kubelet_network.go:76] "Updating Pod CIDR" originalPodCIDR="" newPodCIDR="10.42.1.0/24"
    Jun 13 12:03:40 worker_node_1 k3s[1343]: time="2022-06-13T12:03:40+02:00" level=info msg="Failed to update node worker_node_1: Operation cannot be fulfilled on nodes \"worker_node_1\": the object has been modified; plea>
    Jun 13 12:03:40 worker_node_1 k3s[1343]: E0613 12:03:40.194842    1343 kubelet.go:2040] "Skipping pod synchronization" err="container runtime status check may not have completed yet"

    ...

    Jun 13 12:03:41 worker_node_1 k3s[1343]: I0613 12:03:41.467208    1343 iptables.go:243] Adding iptables rule: -s 10.42.0.0/16 ! -d 224.0.0.0/4 -m comment --comment flanneld masq -j MASQUERADE --random-fully
    Jun 13 12:03:41 worker_node_1 k3s[1343]: I0613 12:03:41.473302    1343 iptables.go:243] Adding iptables rule: ! -s 10.42.0.0/16 -d 10.42.1.0/24 -m comment --comment flanneld masq -j RETURN
    Jun 13 12:03:41 worker_node_1 k3s[1343]: I0613 12:03:41.477367    1343 iptables.go:243] Adding iptables rule: ! -s 10.42.0.0/16 -d 10.42.0.0/16 -m comment --comment flanneld masq -j MASQUERADE --random-fully


If the output does not look like this, and it shows a **401 Unauthorized** error at the end of the output instead, it might be that you have invisible characters in your install command. You can check for these with https://www.soscisurvey.de/tools/view-chars.php

Now you have a fully functioning K3s cluster. Congratulation!!!

If something was incomprehensible, or you did not get it working, feel free to contact me via comment or write me an issue on Github.


## Remarks
This tutorial is inspired by https://www.inovex.de/de/blog/how-to-set-up-a-k3s-cluster-on-wireguard/ which shows how to configure a Raspberry Pi Cluster with K3s.